newdata = as.data.frame(t(colMeans(olive)))
predict(modelolive, newdata)
modelolive <-tree(Olive$Area ~ .,
data = olive)
install.packages("tree")
library(tree)
data(olive)
olive = olive[,-1]
set.seed(125)
modelolive <-tree(Olive$Area ~ .,
data = olive)
fancyRpartPlot(modelolive$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelolive, newdata)
modelolive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(trainSA)
modelCTRL <- trainControl(method = "cv", number = 5, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
glm <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
trControl= modelCTRL)
set.seed(13234)
glm <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = family="binomial")
fit <- predict(trainSA, newdata)
glm <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
fit <- predict(trainSA, newdata)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit,trainSA))
missClass(testSA$chd, predict(fit,testSA))
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
owel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~., data=vowel.train)
imps <- varImp(fit)
order(imps)
vowel = rbind(vowel.test,vowel.train)
vowel
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~., data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("randomForest")
library(randomForest)
fit <- randomForest(y~., data=vowel.train)
imps <- varImp(fit)
fit
summary(vowel.train)
vowel = rbind(vowel.test, vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~., data=vowel.train)
fit
imps <- varImp(fit)
order(imps)
imps
fit <- randomForest(y~., data=vowel)
fit
imps <- varImp(fit)
order(imps)
imps
vowel
order(imps)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test, vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~., data=vowel)
imps <- varImp(fit)
order(imps)
vowel = rbind(vowel.test, vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(3833)
fit <- randomForest(y~., data=vowel)
imps <- varImp(fit)
order(imps)
imps <- varImp(fit, useModel=0)
order(imps)
fit <- randomForest(y~., data=vowel.train)
imps <- varImp(fit, useModel=0)
order(imps)
modelCTRL <- trainControl(method = "cv", number = 5, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = data=vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit, useModel=0)
order(imps)
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit, useModel=0)
order(imps)
vowel = rbind(vowel.test, vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~., data=vowel.train)
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit, useModel=0)
order(imps)
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit, useModel=0)
order(imps)
install.packages("pROC")
library("pROC")
vowel = rbind(vowel.test, vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~., data=vowel)
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit, useModel=0)
order(imps)
imp
imps
imps <- varImp(fit, useModel=0)
order(imps)
set.seed(3833)
fit <- randomForest(y~., data=vowel)
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit, useModel=0)
order(imps)
imps <- varImp(fit)
order(imps)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library("pROC")
vowel = rbind(vowel.test, vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(3833)
fit <- randomForest(y~., data=vowel)
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit)
order(imps)
imps
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE)
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit)
order(imps)
imps
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , preProcOptions="pca", allowParallel=TRUE, seeds=set.seed(33833))
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit)
order(imps)
imps
order()
modelCTRL <- trainControl(method = "cv", number = 15, verboseIter=FALSE , seeds=set.seed(33833))
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit)
order(imps)
imps
modelCTRL <- trainControl(method = "oob", number = 15, verboseIter=FALSE , preProcOptions="pca", seeds=set.seed(33833))
fit <- train(y ~ ., data = vowel.train, method = "rf", trControl= modelCTRL, ntree=50)
imps <- varImp(fit)
order(imps)
imps
imps[order()]
imps[order(),]
imps[order(1),]
str(imps)
summary(imps)
colnames(imps)
colnames(imps)=c("one", "two")
colnames(imps)=c("one")
imps
imps[order(-Overall),]
names(imps)
imps
imps[order(-importance),]
imps[order(-importance),]
set.seed(33833)
fit <- train(y ~ ., method="rf", data=vowel)
imps_1 <- varImp(fit)
and
set.seed(33833)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps_1 <- varImp(fit)
set.seed(33833)
vowel.rf <- randomForest(y ~ ., data=vowel)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps_1, decreasing=TRUE)
set.seed(3833)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps_1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps_1, decreasing=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(3833)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps_1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps_1, decreasing=TRUE)
install.packages("randomForest")
library(randomForest)
set.seed(3833)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
install.packages("train")
library(caret)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps_1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps_1, decreasing=TRUE)
imps_1
set.seed(3833)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps1, decreasing=TRUE)
imps1
imps2
set.seed(33833)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
imps2
imps1
set.seed(13234)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps1, decreasing=TRUE)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
fancyRpartPlot(model$finalModel)
predData <- training[1:3,]
# get column numbers for the three variables of interest
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(model, predData)
predData2 <- training[1,]
which(colnames(training)=="FiberWidthCh1") #50
which(colnames(training)=="VarIntenCh4") #112
which(colnames(training)=="PerimStatusCh1") #85
predData2[1,c(50,112,85)]=c(8,100, 2)
predict(model, predData2)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
fancyRpartPlot(model$finalModel)
predData <- training[1:3,]
# get column numbers for the three variables of interest
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(model, predData)
predData2 <- training[1,]
which(colnames(training)=="FiberWidthCh1") #50
which(colnames(training)=="VarIntenCh4") #112
which(colnames(training)=="PerimStatusCh1") #85
predData2[1,c(50,112,85)]=c(8,100, 2)
predict(model, predData2)
library(pgmm)
library(tree)
data(olive)
olive = olive[,-1]
set.seed(125)
modelolive <-tree(Olive$Area ~ .,
data = olive)
fancyRpartPlot(modelolive$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelolive, newdata)
library(pgmm)
library(tree)
data(olive)
olive = olive[,-1]
set.seed(125)
modelolive <-tree(Olive$Area ~ .,
data = olive)
modelolive <-tree(olive$Area ~ .,
data = olive)
fancyRpartPlot(modelolive$finalModel)
olive = olive[,-1]
set.seed(125)
modelolive <-tree(olive$Area ~ .,
data = olive)
View(olive)
library(pgmm)
library(tree)
data(olive)
olive = olive[,-1]
set.seed(125)
modelolive <-tree(olive$Area ~ .,
data = olive)
fancyRpartPlot(modelolive$finalModel)
modelolive
data = olive)
fancyRpartPlot(modelolive$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelolive, newdata)
fancyRpartPlot(modelolive$finalModel)
install.packages("fancyRpartPlot")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
# Question 4
Load the South Africa Heart Disease Data and create training and test sets with the following code:
```{r}
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
```
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
install.packages("randomForest")
data = trainSA,
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
install.packages("caret")
install.packages("caret")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
install.packages("caret")
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
list.of.packages <- c("caret",
"kernlab",
"randomForest",
"Hmisc",
"abind",
"arm",
"rpart",
"parallel",
"doParallel",
"gbm",
"plyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(caret)
library(kernlab)
library(randomForest)
library(Hmisc)
library(abind)
library(arm)
library(rpart)
library(parallel)
library(doParallel)
library(gbm)
library(plyr)
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(13234)
vowel.train$y = factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
imps1 <- varImp(fit)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
imps2 <- importance(vowel.rf, type=2)
order(imps2, decreasing=TRUE)
order(imps1, decreasing=TRUE)
imps2
colSums
show
dgamma
lm
showMethods("show")
createmean <- function(x) {
answer <- mean(x)
return(answer)
}
predict
colSums
predict
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone/Report")
source('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone/createSamples.r')
source("library_setup.r", local = TRUE)
setupEnvironment()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone")
source("library_setup.r", local = TRUE)
setupEnvironment()
source("predictBackOff.r", local = TRUE)
shiny::runApp()
shiny::runApp()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone/SwiftKey-Prediction/Data-Science-Capstone")
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Coursera/Data Science Capstone')
